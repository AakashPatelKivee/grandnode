@*<header role="presentation">
    @await Component.InvokeAsync("Widget", new { widgetZone = "header" })
    <div class="container">
        <div class="headBottom d-flex align-items-center d-lg-inline-flex text-lg-left text-center mt-0 mb-0">
            <a class="js-offcanvas-trigger mobile-menu-trigger d-lg-none d-flex justify-content-center align-content-center mr-3" data-offcanvas-trigger="mobile_menu" href="#mobile_menu">
                <span class="mdi mdi-menu"></span>
            </a>
            <div class="header-logo pr-0 pl-0 mx-lg-0 mx-auto d-inline-flex align-items-center">
                @await Component.InvokeAsync("Logo")
            </div>
            <div class="formSearch ml-lg-auto ml-2 pl-lg-3 pl-0 d-inline-flex align-items-end">
                @await Component.InvokeAsync("SearchBox")
            </div>
            <a class="js-offcanvas-trigger user-panel-trigger d-flex justify-content-center align-content-center ml-lg-3 ml-2" data-offcanvas-trigger="user_panel" href="#user_panel">
                <span class="mdi mdi-account-outline"></span>
            </a>
            @await Component.InvokeAsync("ShoppingCartLinks")
        </div>
    </div>
    <nav class="navbar mainNav navbar-expand-sm offcanvas-desktop">
        <div class="navbar-collapse container">
            <ul class="navbar-nav">
                @await Component.InvokeAsync("TopMenu")
            </ul>
        </div>
    </nav>
</header>*@
@using Grand.Framework.Themes
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder
@{ 
    var supportRtl = workContext.WorkingLanguage.Rtl;
    var themeName = themeContext.WorkingThemeName;
    if (supportRtl)
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/header/header.rtl.css", themeName));
    }
    else
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/header/header.css", themeName));
    }
}
<div class="header-nav">
    <b-navbar type="light">
        <b-container :fluid="fluid" id="header-container">
            <template v-if="isMobile()">
                <div>
                    <b-button class="menu-toggler" v-b-toggle.sidebar-menu><span></span><span></span><span></span></b-button>
                    <b-sidebar id="sidebar-menu"
                               backdrop
                               left
                               shadow>
                        <script asp-location="Footer">
                            var mainmenu = document.querySelector('.main-nav');
                            if (document.getElementById('sidebar-menu')) {
                                document.querySelector("#sidebar-menu .b-sidebar-body").appendChild(mainmenu);
                            } else {
                                document.querySelector(".header-nav").appendChild(mainmenu);
                            }
                        </script>
                    </b-sidebar>
                </div>
            </template>
            @await Component.InvokeAsync("Logo")
            @await Component.InvokeAsync("SearchBox")
            <b-navbar-nav class="order-3">
                <b-nav-item class="d-lg-block d-none">
                    <b-icon :variant="[fluid ? 'info' : 'dark']" icon="aspect-ratio" @@click="fluid = !fluid"></b-icon>
                </b-nav-item>
                <b-nav-item>
                    <b-icon icon="gear" variant="dark" v-b-toggle.sidebar-right></b-icon>
                </b-nav-item>
                <template>
                    <div>
                        <b-sidebar id="sidebar-right" body-class="user-panel" title="@T("Account.MyAccount")" right backdrop>
                            <div class="mb-2">
                                @await Component.InvokeAsync("TaxTypeSelector")
                                @await Component.InvokeAsync("CurrencySelector")
                                @await Component.InvokeAsync("LanguageSelector")
                                @await Component.InvokeAsync("StoreSelector")
                                @await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" })
                            </div>
                            @await Component.InvokeAsync("HeaderLinks")
                        </b-sidebar>
                    </div>
                </template>
                @await Component.InvokeAsync("ShoppingCartLinks")
            </b-navbar-nav>
        </b-container>
    </b-navbar>
    <template v-if="isMobile()">
        <div id="MobileSearchBox" class="w-100 pb-2"></div>
        <script asp-location="Footer">
            var searchBox = document.querySelector('.searchBox');
            if (document.getElementById('MobileSearchBox')) {
                document.querySelector("#MobileSearchBox").appendChild(searchBox);
            } else {
                document.querySelector("#header-container").appendChild(searchBox);
            }
        </script>
    </template>
    <b-navbar toggleable="lg" type="light" variant="light" class="main-nav">
        <b-container :fluid="fluid">
            <b-collapse id="main_nav" is-nav>
                <b-navbar-nav>
                    @await Component.InvokeAsync("TopMenu")
                </b-navbar-nav>
            </b-collapse>
        </b-container>
    </b-navbar>
</div>
