@model ShoppingCartModel
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@using Grand.Framework.Themes
@using Grand.Framework.UI
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder
@{
    var themeName = themeContext.WorkingThemeName;
    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/cart/cart.css", themeName));
    pagebuilder.AppendScriptParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/script/cart.js", themeName));
}

<div class="order-summary-content mt-3" id="ordersummarypagecart">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @if (Model.OrderReviewData.Display)
    {
        <partial name="_OrderReviewData" model="Model.OrderReviewData" />
    }
    @if (Model.Items.Any())
    {
        if (Model.Warnings.Any())
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@

        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="shopping-cart-container">
                <template>
                    <div>
                        <b-table :fields="fields" :items="items" id="cart-table" class="shopping-cart">
                            <!-- A custom formatted data column cell -->
                            <template v-slot:cell(allow)="data">
                                <b-form-checkbox :id="data.value.id" :checked="data.value.checked" :data-href="data.value.href" switch></b-form-checkbox>
                            </template>
                            <template v-slot:cell(picture)="data">
                                <b-link :href="data.value.href" :title="data.value.title">
                                    <b-img-lazy :src="data.value.src" :alt="data.value.alt" :title="data.value.title"></b-img-lazy>
                                </b-link>
                            </template>
                            <template v-slot:cell(product)="data">
                                <div v-html="data.value.name"></div>
                                <div v-html="data.value.sku"></div>
                                <div v-html="data.value.attributes"></div>
                                <div v-html="data.value.warehouse"></div>
                                <div v-html="data.value.vendor"></div>
                                <div v-html="data.value.auction"></div>
                                <div v-html="data.value.recurring"></div>
                                <div v-html="data.value.reservation"></div>
                                <div v-html="data.value.edit"></div>
                                <div v-html="data.value.warnings"></div>
                            </template>
                            <template v-slot:cell(unit)="data">
                                <div v-html="data.value.unitprice"></div>
                            </template>
                            <template v-slot:cell(qty)="data">
                                <div v-html="data.value.selector"></div>
                            </template>
                            <template v-slot:cell(total)="data">
                                <div v-html="data.value.subtotal"></div>
                            </template>
                            <template v-slot:cell(remove)="data">
                                <b-button variant="link" class="text-secondary deleteshoppingcartitem" @@click="deleteitem(data.value.href)">
                                    <b-icon icon="trash"></b-icon>
                                </b-button>
                            </template>
                        </b-table>
                    </div>
                </template>
            </div>
            @if (Model.IsEditable)
            {
                <div class="common-buttons btn-group btn-group-sm mb-3">
                    <button type="button" onclick="setLocation('@(Url.RouteUrl("ClearCart"))')" class="btn btn-danger d-flex justify-content-center removeAll-cart-button"><span class="mdi mdi-delete-forever-outline pr-1"></span><span class="d-sm-block">@T("shoppingcart.clearcart")</span></button>
                </div>
            }
            <div class="cart-options">
                <div class="row">
                    @if (Model.IsEditable)
                    {
                        <div class="col-12 col-md-6 checkoutAttributes">
                            <partial name="_CheckoutAttributes" model="Model.CheckoutAttributes" />
                        </div>
                    }
                    <div class="selected-checkout-attributes col-sm-3 col-md-6 col-12 ml-auto justify-content-end text-right mt-3">
                        @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                        {
                            @Html.Raw(Model.CheckoutAttributeInfo)
                        }
                    </div>
                </div>
            </div>
            @if (Model.IsEditable && Model.Items.Any() && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info d-flex justify-content-end mt-2 mb-2">
                    <span class="taxHelper">
                        @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Shippinginfo }))
                    </span>
                </div>
            }
            <div class="cart-footer mt-3 mb-3">
                <div class="row">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                    @if (Model.IsEditable)
                    {
                        <div class="col-sm-6 col-12 cart-collaterals">
                            @if (Model.GiftCardBox.Display || Model.DiscountBox.Display)
                            {
                                <div class="deals">
                                    <partial name="_GiftCardBox" model="Model.GiftCardBox" />
                                    <partial name="_DiscountBox" model="Model.DiscountBox" />
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                                </div>
                            }
                            @await Component.InvokeAsync("EstimateShipping")
                        </div>
                    }
                    <div class="col-sm-6 col-12 totals float-sm-right ml-auto pt-0">
                        @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable)
                        {
                            if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                            {
                                <div class="card text-white card-danger text-center min-amount-warning">
                                    <div class="card-body p-3">
                                        <blockquote class="card-bodyquote mb-0">
                                            <span>@Model.MinOrderSubtotalWarning</span>
                                        </blockquote>
                                    </div>
                                </div>
                            }
                        }
                        @if (Model.IsEditable)
                        {
                            <div class="checkout-buttons text-center float-sm-right mt-3">
                                @if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                {
                                    @if (Model.ShowCheckoutAsGuestButton)
                                    {
                                        <b-button id="checkoutasguest" @@click="showMsgBoxOne" variant="secondary" class="checkout-as-guest-button mr-1">
                                            @T("Account.Login.CheckoutAsGuest")
                                        </b-button>
                                    }
                                    <b-button id="checkout" name="checkout" @@click="showMsgBoxOne" variant="info" class="checkout-button">
                                        @if (Model.IsGuest)
                                        {
                                            @T("Checkout.Button.Login")
                                        }
                                        else
                                        {
                                            @T("Checkout.Button")
                                        }
                                    </b-button>
                                }
                            </div>
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data text-center">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    <!-- Start running your app -->
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
    @*<script asp-location="Footer">

            function ChangeShoppingCart() {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        data: $('#shopping-cart-form').serialize(),
                        url: '@Url.RouteUrl("UpdateCart")',
                        success: function (data) {
                            $(AjaxCart.flyoutcartselector).replaceWith(data.flyoutshoppingcart);
                            $(AjaxCart.topcartselector).html(data.totalproducts);
                            $('#ordersummarypagecart').replaceWith(data.cart);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Shopping Cart Page.');
                        }
                    });
                }

            $(document).ready(function () {
                $(".deleteshoppingcartitem").click(function () {
                    var href = $(this).closest('[data-href]').data('href');
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: href,
                        success: function (data) {
                            $(AjaxCart.flyoutcartselector).replaceWith(data.flyoutshoppingcart);
                            $(AjaxCart.topcartselector).html(data.totalproducts);
                            $('#ordersummarypagecart').replaceWith(data.cart);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Shopping Cart Page.');
                        }
                    });
                });
                $(".changeshoppingcartitem").click(function () {
                    var href = $(this).closest('[data-href]').data('href');
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: href,
                        success: function (data) {
                            $('#ordersummarypagecart').replaceWith(data.cart);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Shopping Cart Page.');
                        }
                    });
                });
            });
        </script>*@
</div>
<script type="module" asp-location="Footer">
                    new Vue({
                        el: '#app',
                        data: {
                            name: 'Vue Theme',
                        },
                        data() {
                            return {
                                show: false,
                                fluid: false,
                                hover: false,
                                active: false,
                                scTimer: 0,
                                scY: 0,
                                fields: [
                                    @if (Model.IsEditable && Model.IsAllowOnHold) {
                                        <text>
                                            { key: 'allow', label: 'Allow' },
                                        </text>
                                    }
                                    @if (Model.ShowProductImages){
                                        <text>
                                            { key: 'picture', label: '@T("ShoppingCart.Image")' },
                                        </text>
                                    }
                                    { key: 'product', label: '@T("ShoppingCart.Product(s)")' },
                                    { key: 'unit', label: '@T("ShoppingCart.UnitPrice")', sortable: true },
                                    { key: 'qty', label: '@T("ShoppingCart.Quantity")', sortable: true  },
                                    { key: 'total', label: '@T("ShoppingCart.ItemTotal")', sortable: true  },
                                    @if (Model.IsEditable){
                                        <text>
                                            { key: 'remove', label: '@T("Remove")' },
                                        </text>
                                    }
                                ],
                                items: [
                                    @foreach (var item in Model.Items)
                                    {
                                        <text>
                                    {
                                        allow: { id: 'checkbox_@item.Id', checked: '@if(item.IsCart){<text>true</text>}', href: '@Url.RouteUrl("ChangeTypeCartItem", new { id = item.Id, status = !item.IsCart })'  },
                                        picture: { src: '@item.Picture.ImageUrl', href: '@Url.RouteUrl("Product", new { SeName = item.ProductSeName })', alt: '@item.Picture.AlternateText', title: '@item.Picture.Title' },
                                        product: {
                                            name: '<a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>',
                                            @if (Model.ShowSku && !String.IsNullOrEmpty(item.Sku))
                                            {
                                                <text>
                                            sku: '<span class="sku-number">@item.Sku</span>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                            {
                                                <text>
                                            attributes: '<div class="attributes small">@Html.Raw(item.AttributeInfo)</div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.WarehouseName))
                                            {
                                                <text>
                                            warehouse: '<div class="attributes small">@Html.Raw(item.WarehouseName)</div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.VendorName))
                                            {
                                                <text>
                                            vendor: '<div class="attributes small">@T("ShoppingCart.Vendor")<a href="@Url.RouteUrl("Vendor", new { SeName = item.VendorSeName })"> @item.VendorName</a></div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.AuctionInfo))
                                            {
                                                <text>
                                            auction: '<div class="attributes small">@Html.Raw(item.AuctionInfo)</div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                            {
                                                <text>
                                            recuring: '<div class="recurring-info">@Html.Raw(item.RecurringInfo)</div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.ReservationInfo))
                                            {
                                                <text>
                                            reservation: '<div class="rental-info">@Html.Raw(@item.ReservationInfo)</div>',
                                                </text>
                                            }
                                            @if (Model.IsEditable && item.AllowItemEditing)
                                            {
                                                <text>
                                            edit: '@{var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, Context.Request.Scheme);editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id);<div class="edit-item mb-1 mt-1"><a class="btn btn-sm btn-secondary" href="@editCartItemUrl">@T("Common.Edit")</a></div>}',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.ReservationInfo))
                                            {
                                                <text>
                                            warnings: '<div class="message-error"><ul>@foreach (var warning in item.Warnings){<li>@warning</li>}</ul></div>',
                                                </text>
                                            }
                                        },
                                        unit: {
                                            unitprice: '<span class="product-unit-price price">@item.UnitPrice</span>@if (item.UnitPriceWithoutDiscountValue != item.UnitPriceValue && item.UnitPriceWithoutDiscountValue > 0){<div class="text-center"><del class="small text-danger">(@item.UnitPriceWithoutDiscount)</del></div>}'
                                        },
                                        qty: {
                                            @if (Model.IsEditable)
                                            {
                                                <text>
                                                selector: '@if (item.AllowedQuantities.Count > 0){<select id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" class="custom-select form-control qty-dropdown" onchange="ChangeShoppingCart()">@foreach (var qty in item.AllowedQuantities){<option id="itemqty@(item.Id)" selected="@qty.Selected" value="@qty.Value">@qty.Value</option>}</select>}else{<input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="number" value="@(item.Quantity)" min="1" onchange="ChangeShoppingCart()" class="qty-input form-control text-center" />}',
                                                </text>
                                            } else {
                                                <text>
                                                selector: '<input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input-ro form-control text-center" readonly />'
                                                </text>
                                            }
                                        },
                                        total: {
                                            @if (!String.IsNullOrEmpty(item.Discount)) {
                                                <text>
                                                    subtotal: '<div class="d-flex flex-column"><p class="mb-0 prod-total">@item.SubTotal</p><div class="discount text-success text-center"><span>@T("ShoppingCart.ItemYouSave"): </span><span>@item.Discount</span>@if (item.DiscountedQty > 0){<span class="font-weight-light font-italic">@T("ShoppingCart.DiscountedQty"): </span><span class="font-weight-light font-italic">@item.DiscountedQty</span>}</div></div>',
                                                </text>
                                            } else {
                                                <text>
                                                    subtotal: '<p class="mb-0 prod-total">@item.SubTotal</p>'
                                                </text>
                                            }
                                        },
                                        @if (Model.IsEditable)
                                        {
                                            <text>
                                            remove: {
                                                href: '@Url.RouteUrl("DeleteCartItem", new { id = item.Id, shoppingcartpage = true })'
                                            }
                                            </text>
                                        }
                                    },
                                        </text>
                                    }
                                ]
                            }
                        },
                        mounted() {
                            if (localStorage.fluid == "true") this.fluid = "fluid";
                            if (localStorage.fluid == "fluid") this.fluid = "fluid";
                            if (localStorage.fluid == "") this.fluid = "false";
                            window.addEventListener('scroll', this.handleScroll);
                        },
                        watch: {
                            fluid(newName) {
                                localStorage.fluid = newName;
                            },
                        },
                        methods: {
                            @if (Model.IsEditable)
                            {
                                if (Model.TermsOfServiceOnShoppingCartPage)
                                {
                                    <text>
                                        showMsgBoxOne() {
                                            const h = this.$createElement
                                            // Using HTML string
                                            const titleVNode = h('div', { domProps: { innerHTML: '<h5>@T("Checkout.TermsOfService.IAccept")</h5>' } })
                                            const messageVNode = h('div', { domProps: { innerHTML: '@T("Checkout.TermsOfService.PleaseAccept") <a href="@Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Conditionsofuse })">@T("Checkout.TermsOfService.Read")</a>' } })
                                            // We must pass the generated VNodes as arrays
                                            this.$bvModal.msgBoxConfirm([messageVNode], {
                                              title: [titleVNode],
                                                centered: true,
                                                size: 'md',
                                                okVariant: 'info',
                                                okTitle: 'Ok',
                                                cancelTitle: 'Cancel',
                                                cancelVariant: 'danger',
                                                footerClass: 'p-2',
                                                hideHeaderClose: false,
                                            })
                                            .then(value => {
                                                this.boxOne = value
                                                if (value == true) {
                                                    document.querySelector('#shopping-cart-form').setAttribute('action', '@Url.RouteUrl("StartCheckout")');
                                                    document.querySelector('#shopping-cart-form').submit();
                                                }
                                            })
                                            .catch(err => {
                                                // An error occurred
                                            })
                                        },
                                    </text>
                                }
                            }
                            productImage: function (event) {
                                var Imagesrc = event.target.parentElement.getAttribute('data-href');
                                var Image = event.target.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.querySelectorAll(".img-second")[0];
                                Image.setAttribute('src', Imagesrc);
                            },
                            handleScroll: function () {
                                if (this.scTimer) return;
                                this.scTimer = setTimeout(() => {
                                    this.scY = window.scrollY;
                                    clearTimeout(this.scTimer);
                                    this.scTimer = 0;
                                }, 100);
                            },
                            toTop: function () {
                                window.scrollTo({
                                    top: 0,
                                    behavior: "smooth"
                                });
                            },
                        }
                    });
</script>